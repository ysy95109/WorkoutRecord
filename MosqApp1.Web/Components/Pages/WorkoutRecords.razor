@page "/workoutrecords"
@using System.Security.Claims
@attribute [Authorize]
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WorkoutRecordsApiClient WorkoutRecordsApi
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>健身记录</PageTitle>

<h1>健身记录</h1>

@if (workoutRecords == null)
{
    <p><em>加载中……如果太久可能是出问题了</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>用户</th>
                <th>描述</th>
                @* <th>创建日期</th>
                <th>更新日期</th> *@
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span>*新记录</span>
                </td>
                <td>
                    <input @bind="newDescription" @onblur="AddNewRecord" class="form-control" placeholder="输入描述" />
                </td>
                @* <td></td>
                <td></td> *@
            </tr>
            
            @foreach (var record in workoutRecords.OrderByDescending(r => r.Id))
            {
                <tr>
                    <td>@record.UserDisplayName</td>
                    <td>
                        @if (record.UserId == currentUserId)
                        {
                            <input @bind="record.Description" @onblur="() => UpdateRecord(record)" class="form-control" />
                        }
                        else
                        {
                            <span>@record.Description</span>
                        }
                    </td>
                    @* <td>@record.DateCreated.ToShortDateString()</td>
                    <td>@record.DateUpdated.ToShortDateString()</td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WorkoutRecord[]? workoutRecords;
    private string newDescription = string.Empty;
    private string? currentUserName;
    private string? currentUserId;
    private string? currentUserDisplayName;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ((ApiAuthenticationStateProvider)AuthStateProvider).SetInitialized();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                currentUserName = user.Identity.Name;
                currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
                currentUserDisplayName = user.FindFirstValue("DisplayName");
            }

            await LoadWorkoutRecords();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadWorkoutRecords()
    {
        workoutRecords = await WorkoutRecordsApi.GetWorkoutRecordsAsync();
    }

    private async Task UpdateRecord(WorkoutRecord record)
    {
        if (!string.IsNullOrEmpty(record.Description) && !string.IsNullOrEmpty(record.UserId))
        {
            var success = await WorkoutRecordsApi.UpdateWorkoutRecordAsync(record.Id, record);
            if (success)
            {
                await LoadWorkoutRecords();
            }
        }
    }

    private async Task AddNewRecord()
    {
        if (!string.IsNullOrEmpty(newDescription))
        {
            var newRecord = new WorkoutRecord(0, currentUserId, currentUserDisplayName, newDescription, DateTime.Now, DateTime.Now);
            var createdRecord = await WorkoutRecordsApi.CreateWorkoutRecordAsync(newRecord);

            if (createdRecord == null)
                return;
            newDescription = string.Empty;
            await LoadWorkoutRecords();
            
        }
    }
}
